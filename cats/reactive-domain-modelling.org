#+OPTIONS: num:nil toc:nil
#+REVEAL_HLEVEL: 1
# #+REVEAL_TRANS: None/Fade/Slide/Convex/Concave/Zoom
#+REVEAL_TRANS: None

#+REVEAL_INIT_OPTIONS: slideNumber:"c/t"
#+Title: Functional and Reactive Domain Modelling

* Chapter 10.
  Techniques for building domain models
  - responsive
  - easy to reason about
** Remember about problem domain

   - model elements
   - domain vocabulary
   - boundaries of the subsystems

** 10.2 Core principles for functional domain modelling

*** Think in expressions
    
   - An /expression/ is something that has a value.

   - Functions generate bigger expressions from the smaller one.


   #+REVEAL: split:t
   
#+begin_src scala
  def op(no: Stirng) = for {
     _ <- credit(no, BigDecimal(100))
     _ <- credit(no, BigDecimal(300))
     _ <- debit(no, BigDecimal(100))
     b <- balance(no)
  } yield b
#+end_src

    #+ATTR_REVEAL: :frag roll-in
     Each clause in =for= expression is a smaller expression.
    #+ATTR_REVEAL: :frag roll-in
     =flatMap= chained them to yield the final result

   #+REVEAL: split:t
   
   - don't commit to the side effect early
   - use combinators to abstract the effect
   - combinators don't break the chain of expressions 


*** Abstract early evaluate late

Differentiate between 
 - computations 
 - values


   #+REVEAL: split:t
   
#+begin_src scala
  def foo1(...): Account = ...
  // vs 
  def foo2(...): Option[Account] = ...
#+end_src

   - foo1 returns a value 
   - foo2 returns a computation
    #+ATTR_REVEAL: :frag roll-in
Don't comit to values early on.
    #+ATTR_REVEAL: :frag roll-in
You'll loose the power to compose with other computations
    

*** Use the least powerful abstraction that fits

#+ATTR_REVEAL: :frag roll-in
  - the more powerful abstraction is, the more specialized it is
  - consider monadic vs applicative effects 

*** Publish what to do, hide how to do within combinators
    
Consider an example: 
#+begin_src scala
def tradeGeneration(
   marke: Market,
   broker: Account,
   clientAccounts: List[Account]) =
      clientOrders andThen
         execute(market, broker) andThen
             allocate(clientAccounts)
#+end_src

    #+ATTR_REVEAL: :frag roll-in
- the implementation shows what to do
    #+ATTR_REVEAL: :frag roll-in
- how to do is abstracted with 'andThen' combinator


*** Decouple algebra from the implementation
    

    #+ATTR_REVEAL: :frag roll-in

    - algebra is a client's contract (interface)
    - algebra can have multiple implementations
      

   #+REVEAL: split:t

   Ways of achieving this goal: 

    #+ATTR_REVEAL: :frag roll-in
    - trait based composition
    - The Type Class pattern
    - Free monad and interpreter pattern

*** Isolate bounded contexts
*** Prefere futures to actors
