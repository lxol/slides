#+OPTIONS: num:nil toc:nil
#+REVEAL_HLEVEL: 1
# #+REVEAL_TRANS: None/Fade/Slide/Convex/Concave/Zoom
#+REVEAL_TRANS: None

#+REVEAL_INIT_OPTIONS: slideNumber:"c/t"
#+Title: Scala with Cats. 

* Chapter 3 Functors 
** Type class review.

   Type class as a parameterised trait
   #+begin_src scala
     trait JsonWriter[A] {
       def write(value: A): Json
     }
   #+end_src

   #+REVEAL: split:t
   Instance of the type class
   #+begin_src scala
     object JsonWriterInstances {
       implicit val stringWriter: JsonWriter[String] =
         new JsonWriter[String] {
           def write(value: String): Json =
             JsString(value)
         }
     }
   #+end_src


   #+REVEAL: split:t

   Interface object
   #+begin_src scala

     object Json {
       def toJson[A](value: A)(implicit w: JsonWriter[A]): Json =
         w.write(value)
     }

   #+end_src

   #+ATTR_REVEAL: :frag roll-in
   Usage
   #+ATTR_REVEAL: :frag roll-in
   #+begin_src scala
     Json.toJson("foo bar")
   #+end_src

   #+REVEAL: split:t

   Interface syntax
   #+begin_src scala
     implicit class JsonWriterOps[A](value: A) {
       def toJson(implicit w: JsonWriter[A]): Json =
         w.write(value)
     }
   #+end_src

   #+ATTR_REVEAL: :frag roll-in
   Usage
   #+ATTR_REVEAL: :frag roll-in
   #+begin_src scala
     "foo bar".toJson
     1.toJson
     Person("John", "Smith").toJson
   #+end_src


** Monoid review

   #+begin_src scala

     trait Monoid[A] {
       def combine(x: A, y: A): A
       def empty: A
     }
   #+end_src

   #+REVEAL: split:t
   #+begin_src scala
     object MonoidLaws {

       // (1 + 2) + 3 == 1 + (2 + 3)
       def associativeLaw[A](x: A, y: A, z: A)(implicit m: Monoid[A]): Boolean = {
         m.combine(x, m.combine(y, z)) ==
         m.combine(m.combine(x, y), z)
       }

       // 2 + 0 == 0 + 2 == 2
       def identityLaw[A](x: A)(implicit m: Monoid[A]): Boolean = {
         (m.combine(x, m.empty) == x) &&
         (m.combine(m.empty, x) == x)
       }
     }

   #+end_src

   
** 3.1 Examples of Functors
    #+ATTR_REVEAL: :frag roll-in
    Functor is anything with a map method.

    #+ATTR_REVEAL: :frag roll-in
    #+begin_src
scala> List(1,2,4).map(n => n + 10)
val res1: List[Int] = List(11, 12, 14)


    #+end_src

    #+ATTR_REVEAL: :frag roll-in
#+begin_src 
scala> Option(1).map(n => n + 10)
val res66: Option[Int] = Some(11)
#+end_src


   #+REVEAL: split:t
   Because map leaves the structure of the context unchanged, we can
call it repeatedly to sequence multiple computations on the contents
of an inial data structure.

    #+ATTR_REVEAL: :frag roll-in
    #+begin_example
scala> List(1,2,3).
     | map( n => n + 1).
     | map( n => n * 10).
     | map( n => s"${n}!")
val res74: List[String] = List(20!, 30!, 40!)
    #+end_example
    
   #+REVEAL: split:t
    Option map
    #+begin_src 
scala> Option(1).
     | map( n => n + 1).
     | map( n => n * 10).
     | map( n => s"${n}!")
val res76: Option[String] = Some(20!)
    #+end_src

   #+REVEAL: split:t
   Either map
#+begin_src 
scala> Right(1).
     | map( n => n + 1).
     | map( n => n * 10).
     | map( n => s"${n}!")
val res77: scala.util.Either[Nothing,String] = Right(20!)
#+end_src

** 3.2 More Examples of Functors

   Future map
#+begin_src 

scala> Future(1).
     | map( n => n + 1).
     | map( n => n * 10).
     | map( n => s"${n}!")
val res85: scala.concurrent.Future[String] = Future(<not completed>)

scala> Await.result(res85, 1.second)
val res87: String = 20!

#+end_src


** Definition of Functor
    #+begin_src scala
      trait Functor[F[_]] {
        def map[A, B](fa: F[A])(f: A => B): F[B]
      }
    #+end_src

    #+ATTR_REVEAL: :frag roll-in
    /Compare type paremeter to Monoid type class./
    #+ATTR_REVEAL: :frag roll-in
    #+begin_src scala
      trait Monoid[A] {
        def combine(x: A, y: A): A
        def empty: A
      }

    #+end_src

** Type constructors

    #+begin_src
 scala> :k Int
 Int's kind is A

 scala> :k List
 List's kind is F[+A]

 scala> :k Option
 Option's kind is F[+A]

 scala> :k Either
 Either's kind is F[+A1,+A2]

 scala> :k Future
 scala.concurrent.Future's kind is F[+A]
scala> :k List
List's kind is F[+A]

scala> :kind List
List's kind is F[+A]

scala> trait Foo[A] {
     | }

scala> new Foo[Int] {}
val res0: Foo[Int] = $anon$1@2651e783

scala> new Foo[List[Int]] {}
val res2: Foo[List[Int]] = $anon$1@54ed249f

scala> new Foo[Option[Int]] {}
val res3: Foo[Option[Int]] = $anon$1@32e9c3af
scala> trait Bar[F[_]] {}
trait Bar

scala> new Bar[Int] {}
               ^
       error: Int takes no type parameters, expected: 1

scala> new Bar[List] {}
val res5: Bar[List] = $anon$1@32029cd

scala> 

scala> 
scala> :kind Either
Either's kind is F[+A1,+A2]

scala> new Bar[Either] {}
               ^
       error: Either takes 2 type parameters, expected: 1

scala> 


scala> new Bar[({type l[a] = Either[Int, a]})#l]{}
val res15: Bar[[a]scala.util.Either[Int,a]] = $anon$1@79893462



    #+end_src

** Application context and Functor

    #+ATTR_REVEAL: :frag roll-in
   - applicaton contexts (/effect/)
     - =List= - effect of repetition of elements 
     - =Option= - effect of uncertainty

    #+ATTR_REVEAL: :frag roll-in
    Effects modelled using a type constructor F[_]
    
A functor gives an ability to lift a function into a specific context(effect)
 


